import{_ as o,c as p,a as e,b as l,d as a,w as i,e as r,r as s,o as d}from"./app-CoDXNw-u.js";const c={},h=e("h1",{id:"pull-requests指南",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pull-requests指南"},[e("span",null,"Pull Requests指南")])],-1),u=e("p",null,[l("本文介绍了向 "),e("a",{href:"https://github.com/DragonOS-Community/DragonOS",target:"_blank",rel:"noopener noreferrer"},"DragonOS项目"),l(" 及其子项目提交Pull Requests的流程。")],-1),m={class:"table-of-contents"},E=e("h2",{id:"在提交pr之前",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#在提交pr之前"},[e("span",null,"在提交PR之前")])],-1),g=r('<p><strong>确保您的拉取请求符合我们的最佳实践。这些实践包括遵循项目规范、提交小的拉取请求以及充分注释。</strong></p><h3 id="运行本地的测试" tabindex="-1"><a class="header-anchor" href="#运行本地的测试"><span>运行本地的测试</span></a></h3><p>当你在提交PR之前，请运行以下命令进行本地测试：</p><ul><li>格式化代码（<code>make fmt</code>或者<code>cargo fmt</code>）</li><li>运行静态测试 （对于DragonOS仓库而言，是<code>cd kernel &amp;&amp; make test</code>）</li></ul><h2 id="pr的流程" tabindex="-1"><a class="header-anchor" href="#pr的流程"><span>PR的流程</span></a></h2><ul><li><a href="https://help.github.com/articles/about-pull-requests/" target="_blank" rel="noopener noreferrer">创建一个PR</a></li><li>签署CLA（暂时还不需要）</li><li>通过自动化测试</li><li>获得来自reviewer，以及代码拥有者的“Approve”</li></ul><h2 id="某个feature或者pr是必要的吗" tabindex="-1"><a class="header-anchor" href="#某个feature或者pr是必要的吗"><span>某个Feature或者PR是必要的吗？</span></a></h2><p>有时候我们想到了一些点子，或者发现了一些“BUG”（请注意是有双引号的）。在开始开发之前，最好的方式是先与社区的成员们讨论它！</p><p>也许这些feature是不必要的，或者不是bug。在讨论后，你将能获得更好的解决方案！</p>',9),A=r('<h2 id="保持简洁、无需、最小可行性产品等原则" tabindex="-1"><a class="header-anchor" href="#保持简洁、无需、最小可行性产品等原则"><span>保持简洁、无需、最小可行性产品等原则</span></a></h2><p>有时我们需要提醒彼此软件设计的核心原则——“保持简洁”、“你不需要它（YAGNI）”、“最小可行性产品（MVP）”等。</p><p>往项目里面添加“也许我们以后需要（但现在用不上，也难以充分验证）”的功能，是与我们的开发原则相违背的。</p><p>请你添加你现在需要的功能，并且为将来可能需要的功能，留出可扩展的空间——但是请不要现在实现他们！</p><h2 id="小即是美-小的提交-小的请求" tabindex="-1"><a class="header-anchor" href="#小即是美-小的提交-小的请求"><span>小即是美：小的提交，小的请求</span></a></h2><p>小的提交和小的请求审查得更快，而且比大的更可能正确。</p><p><em>注意力是一种稀缺资源。</em></p><p>如果你的请求需要60分钟来审查，审查者在最后30分钟的注意力可能不如最初的30分钟敏锐。</p><p>如果需要一个大的连续时间段来进行审查，它可能根本就不会被审查！</p><h3 id="拆分commit" tabindex="-1"><a class="header-anchor" href="#拆分commit"><span>拆分commit</span></a></h3><p>将你的请求在每个逻辑断点处进行拆分，分成多个commits.</p><p>多个逻辑上有意义的提交，有助于向审查者展示你的开发过程，以及你的想法。</p><p><strong>请努力将逻辑上不同的想法分组到单独的提交中。</strong></p><p>例如，如果你发现Feature-X需要一些重构才能适应，就做一个只进行那种重构的提交， 然后再为Feature-X做一个新的提交。 在提交数量上要找到一个平衡点。 一个包含25个提交的请求仍然很难审查，所以要运用你的最佳判断。</p><h3 id="拆分pr" tabindex="-1"><a class="header-anchor" href="#拆分pr"><span>拆分PR</span></a></h3><p>或者，回到我们重构的例子，你也可以创建一个新分支，在那里进行重构，然后为那个功能发一个PR。</p><p>如果你能从你的PR中，把单独的，可合并到主线的部分作为单独的PR来提交到主线，你就可以避免不断rebase的痛苦问题。</p><p>DragonOS的仓库主线一直在更新，请你尽快提交小的PR、小的更改。（你的PR更早合并进主线的话，其他繁琐的事情就是别人的了）</p><p><strong>多个小的请求通常比多个提交更好。</strong></p><p>不要担心太多的小PR会淹没我们。我们宁愿有100个小的、明显的PR，也不愿有10个无法审查的庞然大物。</p><p>我们希望每个PR都能独立工作，所以在拆分时，决定是作为独立的PR还是独立的commit时，要结合你的最佳判断。</p><p>作为一个经验法则，如果你的请求与Feature-X直接相关，而不涉及其他内容，它应该可能是Feature-X请求的一部分。 如果你能解释你为什么做看似无用的操作,比如：“我保证它使Feature-X的变更更容易”，我们可能就会接受你的PR。</p><h2 id="为修复和通用功能开启不同的pr" tabindex="-1"><a class="header-anchor" href="#为修复和通用功能开启不同的pr"><span>为修复和通用功能开启不同的PR</span></a></h2><p><strong>将与你正在开发的feature无关的更改放入不同的PR中。</strong></p><p>通常，在你实现Feature-X的过程中，你会发现差的注释、命名不当的函数、糟糕的结构、薄弱的类型安全等问题。</p><p>你绝对应该修复这些问题（或者至少请提出issue），但不要与你的特性放在同一个请求中。否则，你的差异将会有太多的变化，你的审查者将无法看到树木之外的森林。</p><p><strong>寻找将功能提取出来的机会。</strong></p><p>例如，如果你发现自己接触了很多模块，思考一下你在包之间引入的依赖关系。 你正在做的一些事情能否变得更加通用，并从Feature-X包中移出并上移？ 你是否需要使用一个与其它包无关的函数或类型？ 如果是，就把这些代码单独封装/提出来！</p><p>同样，如果Feature-X与上个月提交的Feature-W在形式上相似，并且你正在复制Feature-W中的一些棘手内容，考虑将核心逻辑提取出来，并在Feature-W和Feature-X中都使用它。</p><p>（请在一个单独的commit或PR中这样做。）</p><h2 id="不要开启涵盖整个仓库的pr" tabindex="-1"><a class="header-anchor" href="#不要开启涵盖整个仓库的pr"><span>不要开启涵盖整个仓库的PR</span></a></h2><p>通常，一个新的贡献者会在仓库的许多地方发现一些问题，并提交一个PR一次性修复所有问题。</p><p>也许最新的Rust版本中有一个很酷的新函数，每个人都应该使用，或者有一个最近被弃用的函数，应该用调用其替代函数来替换。有时，贡献者会运行linter或安全扫描器来查找问题，或者在注释或变量名中修复特定的拼写错误。</p><p>这种方法的问题是，仓库的不同部分由不同的SIG维护，因此对这些不同部分的更改需要得到不同人的批准。一个包含20个单行更改、散布在仓库各处的PR可能最终需要5个或10个以上的批准才能合并。（尽管有少数人可以批准对仓库大部分内容的更改，但这些人通常是最忙碌、最难获得审查的，特别是当你是一个在社区内还没有联系的新贡献者时。）</p><p>如果你真的想尝试让这样的PR合并，你最好的做法是将PR分解，把他拆分为每个它所涉及的SIG的单独PR。你可以查看仓库下的<code>triagebot.toml</code>文件，看看谁拥有那段代码，然后相应地将你的修改分为多个PR。</p><h2 id="注释很重要" tabindex="-1"><a class="header-anchor" href="#注释很重要"><span>注释很重要</span></a></h2><p>在你的代码中，如果有人可能不理解你为什么这么做（或者你以后会忘记为什么），那就加上注释。许多代码审查的评论都是关于这个确切的问题。</p><p>如果你认为有一些非常明显的事情我们可以跟进，请添加一个TODO。</p>',38),f=r(`<h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>没有什么比开始审查时发现测试不充分或缺失更令人沮丧的了。</p><p><strong>如果你的PR测试不充分，或者压根没有测试，审查者会很恼火，或者根本不会审查你的代码！</strong></p><p>非常少的PR可以在不触及测试的情况下修改代码。</p><p><strong>如果你不知道如何测试Feature-X，请提问！</strong> 我们将很高兴帮助你设计易于测试的东西，或者建议合适的测试用例。</p><h2 id="commit-message指南" tabindex="-1"><a class="header-anchor" href="#commit-message指南"><span>Commit Message指南</span></a></h2><p><strong>请注意，PR的标题应该遵守“<a href="#%E4%BD%BF%E7%94%A8%E2%80%9C%E7%BA%A6%E5%AE%9A%E5%BC%8F%E6%8F%90%E4%BA%A4%E2%80%9D">约定式提交</a>”的规范</strong></p><p>PR评论不会出现在提交历史中。</p><p>提交和它们的提交信息是您的PR中正在进行的更改的_“永久记录”<em>，它们的提交信息应该准确地描述_什么_和_为什么</em>。</p><p>提交信息由两部分组成：主题和正文。</p><p>主题是提交信息的首行，对于小或微不足道的更改通常只需要这部分。 这些可以通过<code>git commit -m</code>或<code>--message</code>标志作为“单行”完成，但只有在可以用这几句话完全描述这个commit时，才可以这样做。 提交信息的正文是当你运行<code>git commit</code>不带<code>-m</code>标志时，主题下方的文本部分，这将在你的编辑器中打开提交信息进行编辑。</p><p>输入一些解释性的句子对于你的审查和整体后期的项目维护是非常有用的。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">提交类型：这是提交信息的主题</span>
<span class="line"></span>
<span class="line">这里的任何文本都是提交信息的正文</span>
<span class="line">一些文本</span>
<span class="line">更多的文本</span>
<span class="line">...</span>
<span class="line"># 请输入你的更改的提交信息。以&#39;#&#39;开头的行将被忽略，空消息会终止提交。</span>
<span class="line">#</span>
<span class="line"># 在分支 example</span>
<span class="line"># 要提交的更改：</span>
<span class="line">#   ...</span>
<span class="line">#</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用以下指南来帮助编写格式良好的提交信息。</p><ul><li><a href="#%E4%BD%BF%E7%94%A8%E2%80%9C%E7%BA%A6%E5%AE%9A%E5%BC%8F%E6%8F%90%E4%BA%A4%E2%80%9D">使用“约定式提交”</a></li><li><a href="#%E5%B0%9D%E8%AF%95%E5%B0%86%E4%B8%BB%E9%A2%98%E8%A1%8C%E4%BF%9D%E6%8C%81%E5%9C%A850%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%BB%A5%E5%86%85-%E4%B8%8D%E8%A6%81%E8%B6%85%E8%BF%8772%E4%B8%AA%E5%AD%97%E7%AC%A6">尝试将主题行保持在50个字符以内；不要超过72个字符</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E4%B8%BB%E9%A2%98%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%AF%8D%E5%BA%94%E8%AF%A5%E5%A4%A7%E5%86%99-%E9%99%A4%E9%9D%9E%E5%AE%83%E4%BB%A5%E5%B0%8F%E5%86%99%E7%AC%A6%E5%8F%B7%E6%88%96%E5%85%B6%E4%BB%96%E6%A0%87%E8%AF%86%E7%AC%A6%E5%BC%80%E5%A4%B4">提交信息主题的第一个词应该大写，除非它以小写符号或其他标识符开头</a></li><li><a href="#%E4%B8%8D%E8%A6%81%E4%BB%A5%E5%8F%A5%E5%8F%B7%E7%BB%93%E6%9D%9F%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E4%B8%BB%E9%A2%98">不要以句号结束提交信息主题</a></li><li><a href="#%E5%9C%A8%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E4%B8%BB%E9%A2%98%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%A5%88%E4%BD%BF%E8%AF%AD%E6%B0%94">在提交信息主题中使用祈使语气</a></li><li><a href="#%E5%9C%A8%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E6%AD%A3%E6%96%87%E5%89%8D%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E7%A9%BA%E7%99%BD%E8%A1%8C">在提交信息正文前添加一个空白行</a></li><li><a href="#%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E4%B8%AD%E4%BD%BF%E7%94%A8github%E5%85%B3%E9%94%AE%E8%AF%8D%E6%88%96-%E6%8F%90%E5%8F%8A">不要在提交信息中使用GitHub关键词或(@)提及</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E6%AD%A3%E6%96%87%E6%9D%A5%E8%A7%A3%E9%87%8A%E6%8F%90%E4%BA%A4%E7%9A%84_%E4%BB%80%E4%B9%88_%E5%92%8C_%E4%B8%BA%E4%BB%80%E4%B9%88_">使用提交信息正文来解释提交的_什么_和_为什么_</a></li></ul><h3 id="使用-约定式提交" tabindex="-1"><a class="header-anchor" href="#使用-约定式提交"><span>使用“约定式提交”</span></a></h3><p>  关于约定式提交的详细规范，在<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noopener noreferrer">Conventional Commit/约定式提交</a>网站中有详细介绍，在本节末尾将给出示例(摘自<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noopener noreferrer">Conventional Commit/约定式提交</a>网站)，可选择性阅读。我们做出以下特别说明：</p><ol><li>由于DragonOS内核原则上仅通过系统调用接口保证对外可用性，而迄今为止(2024/04/22)，出于对软件生态的考量，DragonOS选择实现与Linux一致的系统调用，因此不会对<code>破坏性变更(BREAKING CHANGES)</code>做特殊说明，或者说，在当前开发环境中不会产生对用户产生显著影响的破坏性变更，因此无特殊需要，DragonOS内核不应使用诸如<code>feat!</code>来表示破坏性变更。(内核之外，例如dadk，仍需遵循规范)</li><li>DragonOS社区严格遵循基于squash的工作流，因此我们并不强制要求PR中的每一个单独的commit都符合<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noopener noreferrer">Conventional Commit/约定式提交</a>，但是我们仍强烈建议使用。</li><li>关于scope: 如无特殊说明，以子模块/系统/目录名作为范围，例如代码变动是发生在<code>kernel/src/driver/net</code>中的特性追加，那么应当命名为<code>feat(driver/net):</code>，如果是发生在<code>kernel/src/mm/allocator</code>中，应当命名为<code>feat(mm)</code>，简而言之就是要尽可能简短的表现出所属模块，大多数情况下，不应使用超过两级的范围标识，例如<code>fix(x86_64/driver/apic)</code>是错误的，应当命名为<code>fix(x86_64/apic)</code></li><li>在DragonOS内核代码仓库中的<code>issue checker</code>会对标题格式进行简单审查，如果不符合格式的将会被标记为<code>ambiguous</code>，贡献者们请按需修改</li><li>使用小写</li></ol><h3 id="尝试将主题行保持在50个字符以内-不要超过72个字符" tabindex="-1"><a class="header-anchor" href="#尝试将主题行保持在50个字符以内-不要超过72个字符"><span>尝试将主题行保持在50个字符以内；不要超过72个字符</span></a></h3><p>50字符的主题行限制是为了保持消息摘要尽可能简洁。 它应该只是足以描述正在做什么。 72个字符的硬限制是为了与最大正文大小对齐。 当使用<code>git log</code>查看仓库历史时，git会使用额外的空格填充正文文本。 将宽度 控制 在72个字符可以确保正文文本在80列终端中居中并易于查看。</p><h4 id="提供额外上下文" tabindex="-1"><a class="header-anchor" href="#提供额外上下文"><span>提供额外上下文</span></a></h4><p>你可以使用更少的字符通过在提交信息前加上你PR影响的[类型]或[区域]来提供额外上下文。</p><p>这些标签通常是DragonOS社区其他成员会理解的常用标签。</p><p><strong>例如：</strong></p><ul><li><code>feat(mm/allocator): 添加xxxx分配器</code></li><li><code>feat(api)!: send an email to the customer when a product is shipped</code></li><li><code>fix(epoll): 修复epoll在xxx场景下无法唤醒目标进程的问题</code></li></ul><p>这些可以在正文进一步阐述这个PR或者这个commit的内容。</p><h3 id="提交信息主题的第一个词应该大写-除非它以小写符号或其他标识符开头" tabindex="-1"><a class="header-anchor" href="#提交信息主题的第一个词应该大写-除非它以小写符号或其他标识符开头"><span>提交信息主题的第一个词应该大写，除非它以小写符号或其他标识符开头</span></a></h3><p>提交信息主题就像一个缩写句子。 第一个词应该大写，除非消息以符号、首字母缩略词或其他标识符开头，这些通常应该是小写的。</p><h3 id="不要以句号结束提交信息主题" tabindex="-1"><a class="header-anchor" href="#不要以句号结束提交信息主题"><span>不要以句号结束提交信息主题</span></a></h3><p>这主要是为了节省空间，也有助于推动主题行尽可能短和简洁。</p><h3 id="在提交信息主题中使用祈使语气" tabindex="-1"><a class="header-anchor" href="#在提交信息主题中使用祈使语气"><span>在提交信息主题中使用祈使语气</span></a></h3><p>祈使语气可以被认为是_“下达命令”_；它是一个<strong>现在时态</strong>的陈述，明确描述正在做什么。 <strong>好的例子：</strong></p><ul><li>修复y中的x错误</li><li>将foo添加到bar</li><li>撤销提交“baz”</li><li>更新PR指南</li></ul><p><strong>不好的例子</strong></p><ul><li>修复了y中的x错误</li><li>添加了foo到bar</li><li>撤销了错误的提交“baz”</li><li>更新了PR指南</li><li>修复更多问题</li></ul><p>关于形成祈使语气的提交主题的一般准则是，它应该能填充这个句子：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">如果应用，这个提交将 &lt;你的主题行在这里&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>例子：</strong></p><ul><li><em>如果应用，这个提交将</em> <strong>修复y中的x错误</strong></li><li><em>如果应用，这个提交将</em> <strong>将foo添加到bar</strong></li><li><em>如果应用，这个提交将</em> <strong>撤销提交“baz”</strong></li><li><em>如果应用，这个提交将</em> <strong>更新PR指南</strong></li></ul><h3 id="在提交信息正文前添加一个空白行" tabindex="-1"><a class="header-anchor" href="#在提交信息正文前添加一个空白行"><span>在提交信息正文前添加一个空白行</span></a></h3><p>Git使用空白行来确定提交信息的哪部分是主题和正文。 主题前的文本是主题，而主题后的文本被认为是正文。</p><h3 id="将提交信息正文-wrap-在72个字符" tabindex="-1"><a class="header-anchor" href="#将提交信息正文-wrap-在72个字符"><span>将提交信息正文 wrap 在72个字符</span></a></h3><p>Git的默认列宽是80字符。 当查看git日志时，git会在正文文本周围添加额外的空格。 这将为您留下76个可用字符的空间，但是文本将显得“偏斜”。 为了使文本在80列终端中居中并易于查看，Git会使用相同的空格量在另一侧进行人工填充，结果在每行上可用72个字符。 想象一下它们是word文档的边距。</p><h3 id="不要在提交信息中使用github关键词或-提及" tabindex="-1"><a class="header-anchor" href="#不要在提交信息中使用github关键词或-提及"><span>不要在提交信息中使用GitHub关键词或(@)提及</span></a></h3><h4 id="github关键词" tabindex="-1"><a class="header-anchor" href="#github关键词"><span>GitHub关键词</span></a></h4><p>在提交信息中使用[GitHub关键词]后跟<code>#&lt;问题编号&gt;</code>引用将自动在您的PR上应用<code>do-not-merge/invalid-commit-message</code>标签，从而阻止它被合并。 [GitHub关键词]在PR中用于关闭问题是一种便利，但当在提交信息中使用时，可能会产生意外的副作用；通常关闭了它们不应该关闭的东西。 <strong>被阻止的关键词：</strong></p><ul><li>close</li><li>closes</li><li>closed</li><li>fix</li><li>fixes</li><li>fixed</li><li>resolve</li><li>resolves</li><li>resolved</li></ul><h4 id="提及" tabindex="-1"><a class="header-anchor" href="#提及"><span>(@)提及</span></a></h4><p>在提交信息中的(@)提及将向该用户发送通知，并且每当PR更新时，都会持续发送。</p><h3 id="使用提交信息正文来解释提交的-什么-和-为什么" tabindex="-1"><a class="header-anchor" href="#使用提交信息正文来解释提交的-什么-和-为什么"><span>使用提交信息正文来解释提交的_什么_和_为什么_</span></a></h3><p>提交和它们的提交信息是您的PR中正在进行的更改的_“永久记录”_。 描述为什么事情发生了变化以及它可能产生的影响。 你为审查者和下一个需要接触你代码的人提供了上下文。 如果某个东西正在解决一个bug，或者是对某个特定问题的响应，你可以在正文本身中链接它作为参考。 这些类型的面包屑对于追踪未来的bug或回归至关重要，并进一步帮助解释为什么这个提交被创建。 <strong>其他资源：</strong></p><ul><li><a href="https://chris.beams.io/posts/git-commit/" target="_blank" rel="noopener noreferrer">如何编写Git提交信息 - Chris Beams</a></li><li><a href="https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project" target="_blank" rel="noopener noreferrer">分布式Git - 贡献给项目（提交指南）</a></li><li><a href="https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/" target="_blank" rel="noopener noreferrer">50/72规则是怎么回事？ - Preslav Rachev</a></li><li><a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" target="_blank" rel="noopener noreferrer">关于Git提交信息的笔记 - Tim Pope</a></li></ul><h2 id="适当的回击是可以的" tabindex="-1"><a class="header-anchor" href="#适当的回击是可以的"><span>适当的回击是可以的</span></a></h2><p>有时候审查者会犯错。如果你有充分的理由坚持自己的做法，那么你有权与审查者讨论所请求更改的优点。审查者和被审查者都应该以礼貌和尊重的方式讨论这些问题。 你可能会被推翻，但你也可能会成功。我们都是一些相当理性的人。 开源项目的另一个现象（任何人都可以对任何问题发表评论）是“狗群效应”——你的PR收到了来自众多人的众多评论，使得跟进变得困难。在这种情况下，你可以询问主要审查者（分配者）是否希望你创建一个新的分支来清理所有评论。你不必修复每一个评论者提出的所有问题，但应该对合理的评论给出解释。</p><h2 id="琐碎的编辑" tabindex="-1"><a class="header-anchor" href="#琐碎的编辑"><span>琐碎的编辑</span></a></h2><p>每个进来的PR都需要被审查、检查，然后合并。 尽管自动化可以帮助处理这一点，但每个贡献也都有工程成本。因此，如果你发现文件中有一个语法错误或拼写错误，很可能该文件中还有更多类似的错误，你可以通过检查格式、检查链接是否有效以及修复错误，然后一次性提交所有修复，从而使你的请求发挥最大的作用。</p><p><strong>一些需要考虑的问题：</strong></p><ul><li>文件是否还可以进一步改进？</li><li>这次琐碎的编辑是否大大提高了内容的质量？</li></ul><h2 id="工作流" tabindex="-1"><a class="header-anchor" href="#工作流"><span>工作流</span></a></h2><p>DragonOS社区使用<code>@dragonosbot</code>来执行自动化的工作流。</p><p>以下是一个PR从创建到合并的过程</p><ol><li>创建PR</li><li><code>@dragonosbot assign</code> 来分配审查者</li><li>Reviewer审查了你的代码，并且提出了意见。接着，reviewer需要在审查意见的末尾添加一行<code>@dragonosbot author</code>，告知机器人把PR的状态更改为“等待作者修改”。</li><li>把你的更改推送到当前分支</li><li>添加评论，描述你的更改，并且在评论的最后一行添加<code>@dragonosbot ready</code></li><li>重复上述步骤直到审查无问题后，具有合并权限的审查者会将您的代码合并到主线。</li></ol>`,62);function b(_,B){const n=s("RouteLink"),t=s("router-link");return d(),p("div",null,[h,u,e("p",null,[e("em",null,[l("如果您尚不熟悉我们的GitHub工作流程，请先阅读"),a(n,{to:"/contributors/github-workflow.html"},{default:i(()=>[l("GitHub工作流程")]),_:1})])]),e("nav",m,[e("ul",null,[e("li",null,[a(t,{to:"#在提交pr之前"},{default:i(()=>[l("在提交PR之前")]),_:1}),e("ul",null,[e("li",null,[a(t,{to:"#运行本地的测试"},{default:i(()=>[l("运行本地的测试")]),_:1})])])]),e("li",null,[a(t,{to:"#pr的流程"},{default:i(()=>[l("PR的流程")]),_:1})]),e("li",null,[a(t,{to:"#某个feature或者pr是必要的吗"},{default:i(()=>[l("某个Feature或者PR是必要的吗？")]),_:1})]),e("li",null,[a(t,{to:"#保持简洁、无需、最小可行性产品等原则"},{default:i(()=>[l("保持简洁、无需、最小可行性产品等原则")]),_:1})]),e("li",null,[a(t,{to:"#小即是美-小的提交-小的请求"},{default:i(()=>[l("小即是美：小的提交，小的请求")]),_:1}),e("ul",null,[e("li",null,[a(t,{to:"#拆分commit"},{default:i(()=>[l("拆分commit")]),_:1})]),e("li",null,[a(t,{to:"#拆分pr"},{default:i(()=>[l("拆分PR")]),_:1})])])]),e("li",null,[a(t,{to:"#为修复和通用功能开启不同的pr"},{default:i(()=>[l("为修复和通用功能开启不同的PR")]),_:1})]),e("li",null,[a(t,{to:"#不要开启涵盖整个仓库的pr"},{default:i(()=>[l("不要开启涵盖整个仓库的PR")]),_:1})]),e("li",null,[a(t,{to:"#注释很重要"},{default:i(()=>[l("注释很重要")]),_:1})]),e("li",null,[a(t,{to:"#测试"},{default:i(()=>[l("测试")]),_:1})]),e("li",null,[a(t,{to:"#commit-message指南"},{default:i(()=>[l("Commit Message指南")]),_:1}),e("ul",null,[e("li",null,[a(t,{to:"#使用-约定式提交"},{default:i(()=>[l("使用“约定式提交”")]),_:1})]),e("li",null,[a(t,{to:"#尝试将主题行保持在50个字符以内-不要超过72个字符"},{default:i(()=>[l("尝试将主题行保持在50个字符以内；不要超过72个字符")]),_:1})]),e("li",null,[a(t,{to:"#提交信息主题的第一个词应该大写-除非它以小写符号或其他标识符开头"},{default:i(()=>[l("提交信息主题的第一个词应该大写，除非它以小写符号或其他标识符开头")]),_:1})]),e("li",null,[a(t,{to:"#不要以句号结束提交信息主题"},{default:i(()=>[l("不要以句号结束提交信息主题")]),_:1})]),e("li",null,[a(t,{to:"#在提交信息主题中使用祈使语气"},{default:i(()=>[l("在提交信息主题中使用祈使语气")]),_:1})]),e("li",null,[a(t,{to:"#在提交信息正文前添加一个空白行"},{default:i(()=>[l("在提交信息正文前添加一个空白行")]),_:1})]),e("li",null,[a(t,{to:"#将提交信息正文-wrap-在72个字符"},{default:i(()=>[l("将提交信息正文 wrap 在72个字符")]),_:1})]),e("li",null,[a(t,{to:"#不要在提交信息中使用github关键词或-提及"},{default:i(()=>[l("不要在提交信息中使用GitHub关键词或(@)提及")]),_:1})]),e("li",null,[a(t,{to:"#使用提交信息正文来解释提交的-什么-和-为什么"},{default:i(()=>[l("使用提交信息正文来解释提交的_什么_和_为什么_")]),_:1})])])]),e("li",null,[a(t,{to:"#适当的回击是可以的"},{default:i(()=>[l("适当的回击是可以的")]),_:1})]),e("li",null,[a(t,{to:"#琐碎的编辑"},{default:i(()=>[l("琐碎的编辑")]),_:1})]),e("li",null,[a(t,{to:"#工作流"},{default:i(()=>[l("工作流")]),_:1})])])]),E,e("p",null,[l("本指南适用于已经在本地完成开发的人。如果您想知道如何设置开发环境，以及如何为DragonOS社区作出贡献，请转到"),a(n,{to:"/contributors/"},{default:i(()=>[l("贡献者指南")]),_:1})]),e("p",null,[l("如果您是第一次为DragonOS社区作出贡献，请先从’"),a(n,{to:"/contributors/"},{default:i(()=>[l("为DragonOS社区作出贡献")]),_:1}),l("’这篇文章开始阅读！")]),g,e("p",null,[l("您可以在"),a(n,{to:"/communication/"},{default:i(()=>[l("社区沟通渠道")]),_:1}),l("上发帖，与大家交流！")]),A,e("p",null,[l("阅读"),a(n,{to:"/contributors/code-style.html"},{default:i(()=>[l("代码风格指南")]),_:1}),l("- 遵循这些关于注释的一般规则。")]),f])}const R=o(c,[["render",b],["__file","pull-requests.html.vue"]]),P=JSON.parse('{"path":"/contributors/pull-requests.html","title":"Pull Requests指南","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"在提交PR之前","slug":"在提交pr之前","link":"#在提交pr之前","children":[{"level":3,"title":"运行本地的测试","slug":"运行本地的测试","link":"#运行本地的测试","children":[]}]},{"level":2,"title":"PR的流程","slug":"pr的流程","link":"#pr的流程","children":[]},{"level":2,"title":"某个Feature或者PR是必要的吗？","slug":"某个feature或者pr是必要的吗","link":"#某个feature或者pr是必要的吗","children":[]},{"level":2,"title":"保持简洁、无需、最小可行性产品等原则","slug":"保持简洁、无需、最小可行性产品等原则","link":"#保持简洁、无需、最小可行性产品等原则","children":[]},{"level":2,"title":"小即是美：小的提交，小的请求","slug":"小即是美-小的提交-小的请求","link":"#小即是美-小的提交-小的请求","children":[{"level":3,"title":"拆分commit","slug":"拆分commit","link":"#拆分commit","children":[]},{"level":3,"title":"拆分PR","slug":"拆分pr","link":"#拆分pr","children":[]}]},{"level":2,"title":"为修复和通用功能开启不同的PR","slug":"为修复和通用功能开启不同的pr","link":"#为修复和通用功能开启不同的pr","children":[]},{"level":2,"title":"不要开启涵盖整个仓库的PR","slug":"不要开启涵盖整个仓库的pr","link":"#不要开启涵盖整个仓库的pr","children":[]},{"level":2,"title":"注释很重要","slug":"注释很重要","link":"#注释很重要","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":2,"title":"Commit Message指南","slug":"commit-message指南","link":"#commit-message指南","children":[{"level":3,"title":"使用“约定式提交”","slug":"使用-约定式提交","link":"#使用-约定式提交","children":[]},{"level":3,"title":"尝试将主题行保持在50个字符以内；不要超过72个字符","slug":"尝试将主题行保持在50个字符以内-不要超过72个字符","link":"#尝试将主题行保持在50个字符以内-不要超过72个字符","children":[]},{"level":3,"title":"提交信息主题的第一个词应该大写，除非它以小写符号或其他标识符开头","slug":"提交信息主题的第一个词应该大写-除非它以小写符号或其他标识符开头","link":"#提交信息主题的第一个词应该大写-除非它以小写符号或其他标识符开头","children":[]},{"level":3,"title":"不要以句号结束提交信息主题","slug":"不要以句号结束提交信息主题","link":"#不要以句号结束提交信息主题","children":[]},{"level":3,"title":"在提交信息主题中使用祈使语气","slug":"在提交信息主题中使用祈使语气","link":"#在提交信息主题中使用祈使语气","children":[]},{"level":3,"title":"在提交信息正文前添加一个空白行","slug":"在提交信息正文前添加一个空白行","link":"#在提交信息正文前添加一个空白行","children":[]},{"level":3,"title":"将提交信息正文 wrap 在72个字符","slug":"将提交信息正文-wrap-在72个字符","link":"#将提交信息正文-wrap-在72个字符","children":[]},{"level":3,"title":"不要在提交信息中使用GitHub关键词或(@)提及","slug":"不要在提交信息中使用github关键词或-提及","link":"#不要在提交信息中使用github关键词或-提及","children":[]},{"level":3,"title":"使用提交信息正文来解释提交的_什么_和_为什么_","slug":"使用提交信息正文来解释提交的-什么-和-为什么","link":"#使用提交信息正文来解释提交的-什么-和-为什么","children":[]}]},{"level":2,"title":"适当的回击是可以的","slug":"适当的回击是可以的","link":"#适当的回击是可以的","children":[]},{"level":2,"title":"琐碎的编辑","slug":"琐碎的编辑","link":"#琐碎的编辑","children":[]},{"level":2,"title":"工作流","slug":"工作流","link":"#工作流","children":[]}],"git":{"updatedTime":1721145606000,"contributors":[{"name":"Chiichen","email":"chiichen@qq.com","commits":1}]},"filePathRelative":"contributors/pull-requests.md"}');export{R as comp,P as data};
